# overdose dataset
overdose <- read.csv("data/overdose.csv")
# remove columns
bad.cols <- c("Period", "Percent.Complete", "Percent.Pending.Investigation",
"State.Name", "Footnote", "Footnote.Symbol", "Predicted.Value")
overdose <- overdose[,!(colnames(overdose) %in% bad.cols)]
# reshape dataframe to wide format
overdose <- reshape(overdose, idvar = c("State", "Year", "Month"),
timevar = "Indicator", direction = "wide")
# proper column naames
names <- c("state", "year", "month", "overdoseDeaths",
"natural.semiSynthetic.synthetic.methadone",
"opioids", "cocaine", "stimulants", "deaths",
"synthetic.noMethadone", "heroin",
"natural.semiSynthetic.methadone",
"natural.semiSynthetic", "percentSpecified",
"methadone")
colnames(overdose) <- names
# remove aggregate statistics
overdose <- overdose[!(overdose$state %in% c("US", "YC")),]
overdose$state <- droplevels(overdose$state)
# reformat month to ordered factor
months.levels <- c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")
months.labels <- substr(tolower(months.levels), 1, 3)
overdose$month <- ordered(overdose$month, levels = months.levels, labels = months.labels)
# relevant columns
overdose <- overdose[,1:4]
# adding dates
overdose$dates <- as.Date(paste("01", overdose$month, overdose$year, sep =""),
format = "%d%b%Y")
require("censusapi")
Sys.setenv(CENSUS_KEY = '3473513fa1cde2a0539bd2449749c5a3a4fc45ce')
readRenviron("~/.Renviron")
key <- Sys.getenv("CENSUS_KEY")
# list census apis
apis <- listCensusApis()
# iterate through state data files
unemployment <- data.frame()
for (file in list.files("data/state", full.names = T)) {
# state name and data
state <- substr(basename(file), 1, 2)
data <- read.csv(file)
data$state <- rep(state, nrow(data))
# year and month
data$year <- sapply(data$DATE, function(x) as.numeric(substr(x, 1, 4)))
data <- data[data$year >= 2015,]
month <- sapply(data$DATE, function(x) as.numeric(substr(x, 6, 7)))
month <- ordered(month, labels = months.labels)
data$month <- month
colnames(data)[2] <- "unemployment"
# record state data
unemployment <- rbind(unemployment, data)
}
colnames(unemployment)[2] <- "unemployment"
unemployment <- unemployment[,-1] # drop default date column
# merge datasets
overdose <- merge(overdose, unemployment, by = c("state", "year", "month"))
# order
overdose <- overdose[order(overdose$year, overdose$state, overdose$month),]
# convert Federal Reserve Bank of St. Louis data to long-form
stlouis <- function(wide, var.name, state_start, state_end) {
# states to include
states.include <- levels(overdose$state)
# state names
cols.states <- substr(colnames(wide)[-1], state_start, state_end)
colnames(wide) <- c("date", cols.states)
# filter for states
wide <- wide[,c("date", states.include)]
# expand date column
wide$month <- ordered(months(as.POSIXct(wide$date)),
levels = months.levels,
labels = months.labels)
wide$year <- as.numeric(substr(wide$date, 1, 4))
wide <- wide[,-1] # remove original date variable
wide <- wide[,c("year", "month", states.include)]
# filter years
wide <- wide[wide$year >= 2015 & wide$year <= 2019,]
# filter months in 2019 (april is the last month in the overdose dataset in 2019)
wide <- wide[!(wide$month > "apr" & wide$year == 2019),]
# convert to longform data
long <- reshape(wide, direction = "long",
varying = states.include,
v.names = var.name,
idvar = c("year", "month"),
times = states.include)
# column name and order
colnames(long)[3] <- "state"
long <- long[,c("state", "year", "month", var.name)]
return(long)
}
# read in data
imports <- read.table("data/imports/Imports.txt", header = T)
permits <- read.table("data/permits/Permits.txt", header = T)
income <- read.table("data/income/income.txt", header = T)
# handle export data (multi-file dataset)
multmerge <- function(mypath) {
filesnames <- list.files(path = "data/exports", full.names = T)
datalist <- lapply(filesnames, function(x) {read.csv(file = x, header = T) })
Reduce(function(d1, d2) merge(d1, d2, by = "DATE"), datalist)
}
exports <- multmerge("data/exports")
names(exports) <- c("dates", substr(names(exports)[-1], 7, 9))
# convert to long-form
permits <- stlouis(permits, "permits", 1, 2)
imports <- stlouis(imports, "imports", 7, 8)
income <- stlouis(income, "income", 1, 2)[-3]
exports <- reshape(exports,
direction = "long", varying = names(exports)[-1],
v.names = "exports", timevar = "state",
times = names(exports)[-1])
exports$dates <- as.Date(exports$date)
exports$id <- NULL
# combine with overdose and unemployment data
overdose <- merge(overdose, permits, by = c("state", "year", "month"))
overdose <- merge(overdose, imports, by = c("state", "year", "month"))
overdose <- merge(overdose, exports, by = c("state", "dates"))
overdose <- merge(overdose, income, by = c("state", "year"))
# data
population <- read.csv("data/population.csv")
# filter for 50 states and DC
population <- population[6:(nrow(population) - 1),]
# state names
abbrev <- function(state) {
if (state == "District of Columbia") {
return("DC")
}
return(state.abb[which(state.name == state)])
}
population$state <- unlist(sapply(population$NAME, abbrev))
# relevant variables
population <- population[,c("state", paste(rep("POPESTIMATE", 5),
2014:2018, sep = ""))]
# columns names
pop.cols <- as.character(2015:2019)
colnames(population) <- c("state", pop.cols)
# convert to long format
population <- reshape(population, direction = "long",
varying = pop.cols,
v.names = "population",
times = pop.cols)
population <- population[,-4]
colnames(population)[2] <- "year"
# merge with overdose dataset
overdose <- merge(overdose, population, by = c("state", "year"))
# region and area
overdose$region <- rep(NA, nrow(overdose))
overdose$area <- rep(NA, nrow(overdose))
for (i in 1:length(state.region)) {
state.row <- overdose$state == state.abb[i]
overdose$region[state.row] <- as.character(state.region[i])
overdose$area[state.row] <- state.area[i]
}
overdose$region[overdose$state == "DC"] <- "South"
overdose$area[overdose$state == "DC"] <- 68
overdose$region <- factor(overdose$region)
# normalize raw predictors
overdose$overdoseDeaths <- (overdose$overdoseDeaths / overdose$population) * 100000
overdose$permits <- (overdose$permits / overdose$population) * 100000
overdose$imports <- (overdose$imports / overdose$population) * 100000
overdose$exports <- (overdose$exports / overdose$population) * 100000
any(is.na(overdose))
any(is.null(overdose))
any(is.nana(overdose))
any(is.nan(overdose))
# number of empty cells
any(is.na(overdose) | is.null(overdose))
?is.nan
is.nan(overdose$unemployment)
is.nan(overdose[,c(4,5)])
is.nan(NA)
is.nan(Inf)
is.finite(overdose)
apply(overdose, 2, function(x) any(is.finite(x)))
apply(overdose, 2, function(x) any(is.infinite(x)))
any(apply(overdose, 2, function(x) any(is.infinite(x))))
any(apply(overdose, 2, function(x) any(is.nan(x))))
# number of empty cells
finite <- apply(overdose, 2, function(x) any(is.infinite(x)))
nans <- apply(overdose, 2, function(x) any(is.nan(x)))
nas <- is.na(overdose)
nulls <- is.null(overdose)
any(finite | nans | nas | nulls)
cor(overdose)
cor(overdose[,c(5:11, 13]))
cor(overdose[,c(5:11, 13)])
cor(overdose[,c(6:11, 13)])
cor(overdose[,c(6:11, 13)])
# number of empty cells
finite <- apply(overdose, 2, function(x) any(is.infinite(x)))
nans <- apply(overdose, 2, function(x) any(is.nan(x)))
nas <- is.na(overdose)
nulls <- is.null(overdose)
any(finite | nans | nas | nulls)
cor(overdose[,c(6:11, 13)])
colors_use <- sample(colors(distinct = T), size = 51, replace = F)
states <- levels(overdose$state)
plot_state <- function(v) {
mydf <- subset(overdose, state == "AK")
plot(mydf[,v][order(mydf$dates)] ~ mydf$dates[order(mydf$dates)],
type = "l",
ylim = range(overdose[,v]),
col = colors_use[1], xlab = "", ylab = v)
for (i in 2:(length(states))) {
mydf <- subset(overdose, state == states[i])
lines(mydf[,v][order(mydf$dates)] ~ mydf$dates[order(mydf$dates)],
col = colors_use[i])
}
}
par(mfrow = c(2, 4), mar = c(2, 4, 1, 1))
for (v in c("overdoseDeaths", "unemployment", "permits", "imports",
"exports", "income", "population")) {
plot_state(v)
}
# histogram and boxplot of response
par(mfrow = c(2, 2), mar = c(2, 1, 1, 1))
hist(overdose$overdoseDeaths, main = "Histogram of Overdose Deaths",
xlab = "Overdose Deaths")
boxplot(overdose$overdoseDeaths, main = "Boxplot of Overdose Deaths",
xlab = "Overdose Deaths")
# histogram and boxplot of log-response
hist(log(overdose$overdoseDeaths), main = "Histogram of Log-Overdose Deaths",
xlab = "Log-Overdose Deaths")
boxplot(log(overdose$overdoseDeaths), main = "Boxplot of Log-Overdose Deaths",
xlab = "Log-Overdose Deaths")
# response vs. unemployment
par(mfrow = c(1, 1))
plot(overdoseDeaths ~ unemployment, data = overdose,
main = "Overdose Deaths vs. Unemployment",
xlab = "Unemployment Percent", ylab = "Overdose Deaths",
pch = 16, col = rgb(0, 0, 0, 0.3))
# train/test data for cross validation
samples <- sample(nrow(overdose), size = 0.8 * nrow(overdose), replace = F)
train <- overdose[samples,]
test <- overdose[-samples,]
# rmse function
rmse <- function(v1, v2) {
return(sqrt(mean((v1 - v2)^2)))
}
# simple linear model
summary(lm1 <- lm(overdoseDeaths ~ unemployment, data = train))
lm1.train <- rmse(predict(lm1, train), train$overdoseDeaths)
lm1.test <- rmse(predict(lm1, test), test$overdoseDeaths)
# observations with simple regression line
plot(overdoseDeaths ~ unemployment, data = overdose,
main = "Overdose Deaths vs. Unemployment",
xlab = "Unemployment Percent", ylab = "Overdose Deaths",
col = rgb(0, 0, 0, 0.3), pch = 16)
x <- seq(min(overdose$unemployment), max(overdose$unemployment), 0.01)
y <- predict(lm1, newdata = data.frame(unemployment = x))
lines(y ~ x, col = "red", lwd = 3)
# kitchen sink model without unemployment
polynomial1 <- lm(overdoseDeaths ~ poly(permits, 2, raw = T) +
poly(imports, 2, raw = T) + poly(income, 2, raw = T) +
poly(population, 2, raw = T) + poly(exports, 2, raw = T) +
region + state, data = train)
# kitchen sink model with unemployment
polynomial2 <- lm(overdoseDeaths ~ poly(unemployment, 2, raw = T) +
poly(permits, 2, raw = T) + poly(imports, 2, raw = T) +
poly(income, 2, raw = T) + poly(population, 2, raw = T) +
poly(exports, 2 , raw = T) +
region + state, data = train)
poly1.train <- rmse(predict(polynomial1, train), train$overdoseDeaths)
poly1.test <- rmse(predict(polynomial1, test), test$overdoseDeaths)
poly2.train <- rmse(predict(polynomial2, train), train$overdoseDeaths)
poly2.test <- rmse(predict(polynomial2, test), test$overdoseDeaths)
# ESS F-test
anova(polynomial1, polynomial2)
# check model assumptions
plot(polynomial2, which = 3, pch = 19)
colnames(overdose)
overdose$year
factor(overdose$year)
colnames(overdose)
# linear model with all main effects excluding unemployment
lm2 <- lm(overdoseDeaths ~ state + month + year +
permits + imports + exports + income +
population + region + area,
data = overdose)
# linear model with all main effects including unemployment
lm3 <- lm(overdoseDeaths ~ state + month  + year +
permits + imports + exports + income +
population + region + area + unemployment,
data = overdose)
# ESS F-test
anova(lm2, lm3)
# quadratic model with all main effects excluding unemployment
polynomial1 <- lm(overdoseDeaths ~ state + month  + year +
poly(permits, 2, raw = T) + poly(imports, 2, raw = T)
+ poly(exports, 2, raw = T) + poly(income, 2, raw = T)
+ poly(population, 2, raw = T) + region + area,
data = overdose)
# quadratic model with all main effects including unemployment
polynomial2 <- lm(overdoseDeaths ~ state + month  + year +
poly(permits, 2, raw = T) + poly(imports, 2, raw = T)
+ poly(exports, 2, raw = T) + poly(income, 2, raw = T)
+ poly(population, 2, raw = T) + region + area
+ poly(unemployment, 2, raw = T),
data = overdose)
poly1.train <- rmse(predict(polynomial1, train), train$overdoseDeaths)
poly1.test <- rmse(predict(polynomial1, test), test$overdoseDeaths)
poly2.train <- rmse(predict(polynomial2, train), train$overdoseDeaths)
poly2.test <- rmse(predict(polynomial2, test), test$overdoseDeaths)
# ESS F-test
anova(polynomial1, polynomial2)
# check model assumptions
plot(polynomial2, which = 3, pch = 19)
# linear model with all main effects excluding unemployment
lm2 <- lm(overdoseDeaths ~ state + month + year +
permits + imports + exports + income +
population + region + area,
data = overdose)
# linear model with all main effects including unemployment
lm3 <- lm(overdoseDeaths ~ state + month  + year +
permits + imports + exports + income +
population + region + area + unemployment,
data = overdose)
# ESS F-test
anova(lm2, lm3)
# quadratic model with all main effects excluding unemployment
polynomial1 <- lm(overdoseDeaths ~ state + month  + year +
poly(permits, 2, raw = T) + poly(imports, 2, raw = T)
+ poly(exports, 2, raw = T) + poly(income, 2, raw = T)
+ poly(population, 2, raw = T) + region + area,
data = overdose)
# quadratic model with all main effects including unemployment
polynomial2 <- lm(overdoseDeaths ~ state + month  + year +
poly(permits, 2, raw = T) + poly(imports, 2, raw = T)
+ poly(exports, 2, raw = T) + poly(income, 2, raw = T)
+ poly(population, 2, raw = T) + region + area
+ poly(unemployment, 2, raw = T),
data = overdose)
poly1.train <- rmse(predict(polynomial1, train), train$overdoseDeaths)
poly1.test <- rmse(predict(polynomial1, test), test$overdoseDeaths)
poly2.train <- rmse(predict(polynomial2, train), train$overdoseDeaths)
poly2.test <- rmse(predict(polynomial2, test), test$overdoseDeaths)
# ESS F-test
anova(polynomial1, polynomial2)
# check model assumptions
plot(polynomial2, which = 3, pch = 19)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
#         main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X)[1:14], col = seq_len(ncol(X)[1:14]), fill = seq_len(14))
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "Beta")
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
testY <- predict(lasso.cv, newx = testX)
lasso.test <- rmse(testY, test$overdoseDeaths)
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
# main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X), col = seq_len(ncol(X)), fill = seq_len(ncol(X)), cex = 0.7)
# >>>>>>> 263d03a2c0a15a5037aa1601e8bb58161e4e6aa1
colnames(X)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
#         main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
cols <- c(1,64:79)
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)), fill = seq_len(length(cols)))
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "Beta")
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
testY <- predict(lasso.cv, newx = testX)
lasso.test <- rmse(testY, test$overdoseDeaths)
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
# main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X), col = seq_len(ncol(X)), fill = seq_len(ncol(X)), cex = 0.7)
# >>>>>>> 263d03a2c0a15a5037aa1601e8bb58161e4e6aa1
lasso.cv$glmnet.fit
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
lasso.cv$glmnet.fit <- test
View(test)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
#         main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
cols <- c(1,64:79)
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)), fill = seq_len(length(cols)))
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "Beta")
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
testY <- predict(lasso.cv, newx = testX)
lasso.test <- rmse(testY, test$overdoseDeaths)
# matplot(log(lasso.cv$lambda, 10), t(lasso.cv$beta), type = "l",
# main = "Lasso Feature Selection", xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X), col = seq_len(ncol(X)), fill = seq_len(ncol(X)), cex = 0.7)
# >>>>>>> 263d03a2c0a15a5037aa1601e8bb58161e4e6aa1
lasso.cv$glmnet.fit -> test
View(test)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
cols <- c(1,64:79)
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)), fill = seq_len(length(cols)))
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "Beta")
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
cols <- c(1,64:79)
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)), fill = seq_len(length(cols)))
# predictive results
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
cols <- c(1,64:79)
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)),
fill = seq_len(length(cols)))
# predictive results
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
# train/test data for cross validation
samples <- sample(nrow(overdose), size = 0.8 * nrow(overdose), replace = F)
train <- overdose[samples,]
test <- overdose[-samples,]
# rmse function
rmse <- function(v1, v2) {
return(sqrt(mean((v1 - v2)^2)))
}
# simple linear model
summary(lm1 <- lm(overdoseDeaths ~ unemployment, data = train))
lm1.train <- rmse(predict(lm1, train), train$overdoseDeaths)
lm1.test <- rmse(predict(lm1, test), test$overdoseDeaths)
library(glmnet) # package
# design matrix and model
X <- model.matrix(formula(polynomial2), data = train)
y <- train$overdoseDeaths
lasso.cv <- cv.glmnet(X, y, alpha = 1)
# feature importance plot
cols <- c(1,64:79)
plot(lasso.cv$glmnet.fit, "lambda", main = "Lasso Feature Selection",
xlab = "log(lambda)", ylab = "beta")
legend("topleft", colnames(X)[c(1,64:79)], col = seq_len(length(cols)),
fill = seq_len(length(cols)))
# predictive results
lasso.train <- sqrt(min(lasso.cv$cvm))
testX <- model.matrix(formula(polynomial2), data = test)
testY <- predict(lasso.cv, newx = testX)
lasso.test <- rmse(testY, test$overdoseDeaths)
lasso.cv$glmnet.fit
lasso.cv$glmnet.fit -> test
View(test)
hmm <- test$beta
View(hmm)
hmm
library(randomForest) # package
# random forest
rf1 <- randomForest(overdoseDeaths ~ unemployment + permits +
imports + exports + income + population +
region + state,
data = train, mtry = 3, ntree = 500)
rf1.train <- rmse(rf1$predicted, train$overdoseDeaths)
rf1.test <- rmse(predict(rf1, test), test$overdoseDeaths)
# linear model with all main effects excluding unemployment
lm2 <- lm(overdoseDeaths ~ state + month + year +
permits + imports + exports + income +
population + region + area,
data = train)
# linear model with all main effects including unemployment
lm3 <- lm(overdoseDeaths ~ state + month  + year +
permits + imports + exports + income +
population + region + area + unemployment,
data = train)
# ESS F-test
anova(lm2, lm3)
# record predictive results
lm2.train <- rmse(predict(lm2, train), train$overdoseDeaths)
lm2.test <- rmse(predict(lm2, test), test$overdoseDeaths)
test
